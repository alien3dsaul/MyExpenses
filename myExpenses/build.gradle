buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.7.0'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.jakewharton.hugo'

def buildVersionNumberBlackBerry() {
    def result = android.defaultConfig.versionName
    if (result.split('\\.').length == 4)
        return result
    else
        return result + ".0"
}

def quote(String input) {
    return "\"" + input + "\""
}

def getPropertyIfDefined(property) {
    return getPropertyIfDefined(property, "")
}

def getPropertyIfDefined(property, defaultValue) {
    if (project.hasProperty(property)) {
        return project.ext.properties[property]
    }
    return defaultValue
}

android {
    compileSdkVersion project.compileSdkVersion
    buildToolsVersion project.buildToolsVersion

    defaultConfig {
        applicationId "org.totschnig.myexpenses"
        if (gradle.startParameter.taskNames.contains(":app:assembleDebug")) {
            minSdkVersion 21
        } else {
            minSdkVersion project.minSdkVersion
        }
        targetSdkVersion project.targetSdkVersion
        versionCode 287
        versionName '2.8.0'
        multiDexEnabled true

        buildConfigField "String", "BUILD_DATE", "\"" + getDate() + "\""
        buildConfigField "String", "DISTRIBUTION", "\"GITHUB\""
        buildConfigField "String", "ACRA_FORM_URI", quote(getPropertyIfDefined("ACRA_FORM_URI"))
        buildConfigField "String", "ACRA_FORM_URI_BASIC_AUTH_LOGIN", quote(getPropertyIfDefined("ACRA_FORM_URI_BASIC_AUTH_LOGIN"))
        buildConfigField "String", "ACRA_FORM_URI_BASIC_AUTH_PASSWORD", quote(getPropertyIfDefined("ACRA_FORM_URI_BASIC_AUTH_PASSWORD"))
        testInstrumentationRunner "org.totschnig.myexpenses.MyTestRunner"
        testProguardFile "proguard-test.txt"

        vectorDrawables.useSupportLibrary = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            storeFile file(getPropertyIfDefined("RELEASE_STORE_FILE", "gitlab.keystore"))
            storePassword getPropertyIfDefined("RELEASE_STORE_PASSWORD", "gitlab")
            keyAlias getPropertyIfDefined("RELEASE_KEY_ALIAS", "gitlab")
            keyPassword getPropertyIfDefined("RELEASE_KEY_PASSWORD", "gitlab")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt', 'proguard-flavored.txt'
            signingConfig signingConfigs.release
            manifestPlaceholders = [appName: "@string/app_name", debug: "false"]
            applicationIdSuffix ""
        }
        debug {
            applicationIdSuffix ".debug"
            manifestPlaceholders = [appName: "My Expenses Debug", debug: "true"]
        }
        forTest {
            initWith release
            applicationIdSuffix ".fortest"
        }
    }

    buildTypes.each { type ->
        type.resValue 'string', 'application_id', defaultConfig.applicationId + type.applicationIdSuffix
        type.resValue "string", 'sync_account_type', defaultConfig.applicationId + type.applicationIdSuffix + ".sync"
    }

    flavorDimensions "distribution", "drive", "ads"

    productFlavors {
        play {
            dimension "distribution"
            buildConfigField "String", "DISTRIBUTION", "\"PLAY\""
        }
        amazon {
            dimension "distribution"
            buildConfigField "String", "DISTRIBUTION", "\"AMAZON\""
        }
        blackberry {
            dimension "distribution"
            versionName buildVersionNumberBlackBerry()
            buildConfigField "String", "DISTRIBUTION", "\"BLACKBERRY\""
        }
        withDrive {
            dimension "drive"
        }
        withoutDrive {
            dimension "drive"
        }
        withAds {
            dimension "ads"
        }
        withoutAds {
            dimension "ads"
        }
    }

    lintOptions {
        disable 'InvalidPackage', 'MissingQuantity', 'MissingTranslation', 'ImpliedQuantity'
        abortOnError true
    }

    dexOptions {
        javaMaxHeapSize "2048M"
        jumboMode = true
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    testBuildType "forTest"

    variantFilter { variant ->
        def names = variant.flavors*.name
        if (names.contains("withoutAds")) {
            setIgnore(true)
        }
        if (name.contains("blackberry")) {
            if (names.contains("withDrive")) {
                setIgnore(true)
            }
        } else {
            if (names.contains("withoutDrive")) {
                setIgnore(true)
            }
        }
    }
}

List supportCompile = ['com.android.support:appcompat-v7:' + project.androidSupportLibraryVersion,
                       'com.android.support:support-v4:' + project.androidSupportLibraryVersion,
                       'com.android.support:recyclerview-v7:' + project.androidSupportLibraryVersion,
                       'com.android.support:cardview-v7:' + project.androidSupportLibraryVersion,
                       'com.android.support:design:' + project.androidSupportLibraryVersion,
                       'com.android.support:gridlayout-v7:' + project.androidSupportLibraryVersion,
                       'com.android.support:preference-v14:' + project.androidSupportLibraryVersion]

dependencies {
    compile 'com.jakewharton:butterknife:8.6.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0'
    annotationProcessor 'com.google.dagger:dagger-compiler:' + project.daggerVersion
    compile 'com.google.dagger:dagger:' + project.daggerVersion
    provided 'javax.annotation:jsr250-api:1.0'
    compile 'frankiesardo:icepick:3.2.0'
    provided 'frankiesardo:icepick-processor:3.2.0'
    compile 'com.google.code.gson:gson:2.8.0'
    provided 'com.google.auto.value:auto-value:1.4'
    annotationProcessor 'com.google.auto.value:auto-value:1.4'
    annotationProcessor 'com.ryanharter.auto.value:auto-value-gson:0.4.6'
    provided 'com.ryanharter.auto.value:auto-value-gson:0.4.6'
    annotationProcessor 'com.gabrielittner.auto.value:auto-value-cursor:1.0.1'
    compile 'com.gabrielittner.auto.value:auto-value-cursor-annotations:1.0.0'
    annotationProcessor 'com.ryanharter.auto.value:auto-value-parcel:0.2.5'
    compile 'com.github.mtotschnig:StickyListHeaders:2.7.1'
    compile 'com.github.mtotschnig:MaterialSeekBarPreference:improvement~align-with-layout-specific-to-each-level-SNAPSHOT'
    compile project(':PlayLicensingOrig')
    compile('com.gitlab.mtotschn:dav4android:fbaa5b51') {
        exclude group: "com.android.support", module: "support-annotations"
    }
    compile 'com.itextpdf:itextg:5.5.10'
    compile 'ch.acra:acra:4.9.2'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.onepf:openiab:0.9.8.7'
    compile fileTree(dir: 'libs', include: ['fortumo-in-app-9.1.2.jar', 'in-app-purchasing-2.0.61.jar'])
    //noinspection GradleDynamicVersion
    compile 'org.apache.commons:commons-csv:1.1'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.github.PhilJay:MPAndroidChart:bd75e6c'
    compile 'com.github.mtotschnig:Caldroid:master-SNAPSHOT'
    compile 'com.github.mtotschnig:SimpleDialogFragments:master-SNAPSHOT'
    //noinspection GradleDynamicVersion
    compile 'com.commonsware.cwac:wakeful:1.0.+'
    compile 'com.annimon:stream:1.1.6'

    // WebDAV
    compile 'com.squareup.okhttp3:okhttp:3.4.2'

    //noinspection GradleCompatible
    compile 'com.android.support:multidex:1.0.1'

    compile 'org.apache.commons:commons-collections4:4.1'

    compile 'com.jakewharton.timber:timber:4.5.1'

    withDriveCompile 'com.google.android.gms:play-services-drive:' + project.gmsVersion
    withAdsCompile 'com.google.android.gms:play-services-ads:' + project.gmsVersion
    //noinspection GradleDynamicVersion
    withAdsCompile  'com.amazon.android:mobile-ads:5.+'
    //noinspection GradleDynamicVersion
    withAdsCompile 'com.facebook.android:audience-network-sdk:4.+'
    withAdsCompile fileTree(dir: 'libs', include: ['FacebookAdapter.jar'])

    compile 'com.google.firebase:firebase-core:' + project.gmsVersion

    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'com.github.tony19:logback-android-core:1.1.1-6'
    compile('com.github.tony19:logback-android-classic:1.1.1-6') {
        // workaround issue #73
        exclude group: 'com.google.android', module: 'android'
    }

    compile supportCompile

    compile 'net.pubnative:mediation:1.2.12'

    androidTestCompile 'com.android.support.test.espresso:espresso-core:' + project.espressoVersion
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support:support-annotations:' + project.androidSupportLibraryVersion
    androidTestCompile 'com.android.support.test:runner:' + project.androidSupportTestVersion
    androidTestCompile 'com.android.support.test:rules:' + project.androidSupportTestVersion
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:' + project.espressoVersion
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:' + project.espressoVersion) {
        exclude module: 'accessibility-test-framework'
    }
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.crittercism.dexmaker:dexmaker:1.4'
    androidTestCompile 'com.crittercism.dexmaker:dexmaker-dx:1.4'
    androidTestCompile 'com.crittercism.dexmaker:dexmaker-mockito:1.4'

    testCompile 'junit:junit:4.12'
    testCompile 'pl.pragmatists:JUnitParams:1.0.5'
    testCompile 'org.mockito:mockito-core:1.10.19'
    debugCompile project(path: ':setupwizard', configuration: 'fullSupportDebug')
    forTestCompile project(path: ':setupwizard', configuration: 'fullSupportDebug')
    releaseCompile project(path: ':setupwizard', configuration: 'fullSupportRelease')
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd-HHmm')
    return formattedDate
}

//https://code.google.com/p/android/issues/detail?id=187730
//can be removed after migration to Android Gradle Plugin 2
configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}

//workaround for https://code.google.com/p/android/issues/detail?id=225754
// add support for placeholders in resource files
def replacePlaceholdersInFile(basePath, fileName, placeholders) {
    def file = new File(basePath, fileName);

    if (!file.exists()) {
        logger.quiet("Unable to replace placeholders in " + file.toString() + ". File cannot be found.")
        return;
    }

    logger.debug("Replacing placeholders in " + file.toString())
    logger.debug("Placeholders: " + placeholders.toString())

    def content = file.getText('UTF-8')

    placeholders.each { entry ->
        content = content.replaceAll("\\\$\\{${entry.key}\\}", entry.value)
    }

    file.write(content, 'UTF-8')
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.processResources.doFirst {
                // prepare placeholder map from manifestPlaceholders including applicationId placeholder
                def placeholders = variant.mergedFlavor.manifestPlaceholders + [applicationId: variant.applicationId]

                replacePlaceholdersInFile(resDir, 'xml/shortcuts.xml', placeholders)
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'
