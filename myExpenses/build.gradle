buildscript {
    repositories {
        google()
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        // For Spoon snapshot, until 2.0.0 is released
    }
    dependencies {
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
        classpath "com.jaredsburrows:gradle-spoon-plugin:1.4.0"
        classpath 'com.novoda:gradle-android-command-plugin:2.0'
    }
}

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    // For Spoon snapshot, until 2.0.0 is released
}

apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.hugo'
apply plugin: 'io.fabric'
apply plugin: "com.jaredsburrows.spoon"
apply plugin: 'com.novoda.android-command'

def buildVersionNumberBlackBerry() {
    def result = android.defaultConfig.versionName
    if (result.split('\\.').length == 4)
        return result
    else
        return result + ".0"
}

def quote(String input) {
    return "\"" + input + "\""
}

def getPropertyIfDefined(property) {
    return getPropertyIfDefined(property, "")
}

def getPropertyIfDefined(property, defaultValue) {
    if (project.hasProperty(property)) {
        return project.properties[property]
    }
    return defaultValue
}

android {
    compileSdkVersion project.compileSdkVersion
    useLibrary 'android.test.runner'
    useLibrary 'android.test.mock'
    useLibrary 'android.test.base'

    defaultConfig {
        applicationId "org.totschnig.myexpenses"
        if (gradle.startParameter.taskNames.contains(":myExpenses:assembleDebug")) {
            minSdkVersion 21
        } else {
            minSdkVersion project.minSdkVersion
        }
        targetSdkVersion project.targetSdkVersion
        versionCode 355
        versionName '2.9.8'
        multiDexEnabled true

        buildConfigField "String", "BUILD_DATE", "\"" + getDate() + "\""
        buildConfigField "String", "DISTRIBUTION", "\"GITHUB\""
        buildConfigField "boolean", "UNLOCK_SWITCH", getPropertyIfDefined("UNLOCK", "false")
        testInstrumentationRunner "org.totschnig.myexpenses.MyTestRunner"
        testProguardFile "proguard-test.txt"

        vectorDrawables.useSupportLibrary = true
        resConfigs "en", "ar", "bg", "ca", "cs", "da", "de", "el", "es", "eu", "fr", "hr", "hu", "it", "iw", "ja", "km", "ko", "ms", "pl", "pt", "ro", "ru", "si", "tr", "vi", "pt_PT", "zh_CN", "zh_TW"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            storeFile file(getPropertyIfDefined("RELEASE_STORE_FILE", "gitlab.keystore"))
            storePassword getPropertyIfDefined("RELEASE_STORE_PASSWORD", "gitlab")
            keyAlias getPropertyIfDefined("RELEASE_KEY_ALIAS", "gitlab")
            keyPassword getPropertyIfDefined("RELEASE_KEY_PASSWORD", "gitlab")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt', 'proguard-flavored.txt'
            signingConfig signingConfigs.release
            manifestPlaceholders = [appName: "@string/app_name", debug: "false"]
            applicationIdSuffix ""
        }
        debug {
            applicationIdSuffix ".debug"
            manifestPlaceholders = [appName: "My Expenses Debug", debug: "true"]
        }
        forTest {
            initWith release
            applicationIdSuffix ".fortest"
            manifestPlaceholders = [appName: "My Expenses Test", debug: "true"]
            matchingFallbacks = ['debug']
            buildConfigField "String", "TEST_LANG", quote(getPropertyIfDefined("testLang", "en"))
            buildConfigField "String", "TEST_COUNTRY", quote(getPropertyIfDefined("testCountry", "US"))
            buildConfigField "String", "TEST_CURRENCY", quote(getPropertyIfDefined("testCurrency", "USD"))
            buildConfigField "int", "TEST_SCENARIO", getPropertyIfDefined('testScenario', "1")
        }
    }

    buildTypes.each { type ->
        type.resValue 'string', 'application_id', defaultConfig.applicationId + type.applicationIdSuffix
        type.resValue "string", 'sync_account_type', defaultConfig.applicationId + type.applicationIdSuffix + ".sync"
    }

    flavorDimensions "distribution", "drive", "ads", "crashreporting", "security"

    productFlavors {
        play {
            dimension "distribution"
            buildConfigField "String", "DISTRIBUTION", "\"PLAY\""
        }
        amazon {
            dimension "distribution"
            buildConfigField "String", "DISTRIBUTION", "\"AMAZON\""
        }
        blackberry {
            dimension "distribution"
            versionName buildVersionNumberBlackBerry()
            buildConfigField "String", "DISTRIBUTION", "\"BLACKBERRY\""
        }
        huawei {
            dimension "distribution"
            buildConfigField "String", "DISTRIBUTION", "\"HUAWEI\""

        }
        withDrive {
            dimension "drive"
        }
        withoutDrive {
            dimension "drive"
        }
        withAds {
            dimension "ads"
        }
        withoutAds {
            dimension "ads"
        }
        acra {
            dimension "crashreporting"
        }
        crashlytics {
            dimension "crashreporting"
        }
        conscript {
            dimension "security"
        }
        gms {
            dimension "security"
        }
    }

    lintOptions {
        disable 'InvalidPackage', 'MissingQuantity', 'MissingTranslation', 'ImpliedQuantity'
    }

    dexOptions {
        javaMaxHeapSize "2048M"
        jumboMode = true
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    testBuildType "forTest"

    variantFilter { variant ->
        def names = variant.flavors*.name

        if(project.hasProperty("distribution") && !names.contains(distribution)) {
            setIgnore(true)
        }

        if (project.hasProperty("buildType") && !variant.buildType.name.equals(project.ext.buildType)) {
            setIgnore(true)
        }

        if (names.contains("withoutAds")) {
            setIgnore(true)
        }
        if (name.contains("blackberry")) {
            if (names.contains("withDrive")) {
                setIgnore(true)
            }
        } else {
            if (names.contains("withoutDrive")) {
                setIgnore(true)
            }
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

List supportCompile = ['com.android.support:appcompat-v7:' + project.androidSupportLibraryVersion,
                       'com.android.support:support-v4:' + project.androidSupportLibraryVersion,
                       'com.android.support:recyclerview-v7:' + project.androidSupportLibraryVersion,
                       'com.android.support:cardview-v7:' + project.androidSupportLibraryVersion,
                       'com.android.support:design:' + project.androidSupportLibraryVersion,
                       'com.android.support:gridlayout-v7:' + project.androidSupportLibraryVersion,
                       'com.android.support:preference-v14:' + project.androidSupportLibraryVersion,
                        //make GradleCompatible lint check happy
                       'com.android.support:exifinterface:' + project.androidSupportLibraryVersion,
                        //make GradleCompatible lint check happy
                       'com.android.support:customtabs:' + project.androidSupportLibraryVersion]

dependencies {
    implementation project(':transactionscontract')
    implementation 'com.jakewharton:butterknife:' + project.butterknifeVersion
    implementation 'com.squareup.phrase:phrase:1.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:' + project.butterknifeVersion
    annotationProcessor 'com.google.dagger:dagger-compiler:' + project.daggerVersion
    implementation 'com.google.dagger:dagger:' + project.daggerVersion
    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation 'frankiesardo:icepick:3.2.0'
    compileOnly 'frankiesardo:icepick-processor:3.2.0'
    annotationProcessor 'frankiesardo:icepick-processor:3.2.0'
    implementation 'com.google.code.gson:gson:2.8.4'
    compileOnly 'com.google.auto.value:auto-value:1.5.2'
    annotationProcessor 'com.google.auto.value:auto-value:1.5.2'
    annotationProcessor 'com.ryanharter.auto.value:auto-value-gson:0.4.6'
    compileOnly 'com.ryanharter.auto.value:auto-value-gson:0.4.6'
    annotationProcessor 'com.gabrielittner.auto.value:auto-value-cursor:1.0.1'
    implementation 'com.gabrielittner.auto.value:auto-value-cursor-annotations:1.0.1'
    annotationProcessor 'com.ryanharter.auto.value:auto-value-parcel:0.2.5'
    implementation 'com.github.mtotschnig:StickyListHeaders:2.7.1'
    implementation 'com.github.mtotschnig:MaterialSeekBarPreference:87e7c0d19d'
    implementation project(':PlayLicensingOrig')
    implementation('com.gitlab.mtotschn:dav4android:fbaa5b51') {
        exclude group: "com.android.support", module: "support-annotations"
    }
    implementation 'com.itextpdf:itextg:5.5.10'
    acraImplementation "ch.acra:acra-mail:" + project.acraVersion
    acraImplementation "ch.acra:acra-dialog:" + project.acraVersion
    implementation 'org.apache.commons:commons-lang3:3.4'
    implementation 'com.github.mtotschnig:OpenIAB:3db5d014c3'
    implementation fileTree(dir: 'libs', include: ['in-app-purchasing-2.0.61.jar'])
    implementation 'org.apache.commons:commons-csv:1.5'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'com.github.mtotschnig:MPAndroidChart:StackedBarCharValueTextColor-SNAPSHOT'
    //implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'
    implementation 'com.github.mtotschnig:Caldroid:a86eb51428'
    implementation 'com.github.eltos:SimpleDialogFragments:3abe091998'
    implementation 'com.annimon:stream:1.1.9'

    // WebDAV
    implementation 'com.squareup.okhttp3:okhttp:' + project.okHttpVersion

    // Dropbox
    implementation 'com.dropbox.core:dropbox-core-sdk:3.0.10'

    //noinspection GradleCompatible
    implementation 'com.android.support:multidex:1.0.3'

    implementation 'org.apache.commons:commons-collections4:4.1'

    implementation 'com.jakewharton.timber:timber:4.7.0'

    withAdsImplementation 'com.google.android.gms:play-services-ads:17.1.2'
    withDriveImplementation 'com.google.android.gms:play-services-drive:16.0.0'
    //noinspection GradleDynamicVersion
    withAdsImplementation 'com.amazon.android:mobile-ads:5.+'

    crashlyticsImplementation('com.crashlytics.sdk.android:crashlytics:2.9.6@aar') {
        transitive = true
    }
    implementation 'com.google.firebase:firebase-core:16.0.6'
    implementation 'com.google.firebase:firebase-config:16.1.2'
    implementation 'com.google.firebase:firebase-ads:17.1.2'

    implementation 'org.slf4j:slf4j-api:1.7.21'
    implementation 'com.github.tony19:logback-android-core:1.1.1-6'
    implementation('com.github.tony19:logback-android-classic:1.1.1-6') {
        // workaround issue #73
        exclude group: 'com.google.android', module: 'android'
    }

    implementation supportCompile
    
    implementation project(path: ':setupwizard')

    //licence validation
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:' + project.okHttpVersion

    implementation "android.arch.lifecycle:extensions:1.1.1"
    annotationProcessor "android.arch.lifecycle:compiler:1.1.1"

    implementation 'com.jakewharton.threetenabp:threetenabp:1.1.0'
    
    implementation 'com.github.lzyzsd:circleprogress:1.2.1'

    conscriptImplementation 'org.conscrypt:conscrypt-android:1.2.0'

    implementation 'com.squareup.sqlbrite3:sqlbrite:3.2.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

    androidTestImplementation 'com.android.support.test.espresso:espresso-core:' + project.espressoVersion
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support:support-annotations:' + project.androidSupportLibraryVersion
    androidTestImplementation 'com.android.support.test:runner:' + project.androidSupportTestVersion
    androidTestImplementation 'com.android.support.test:rules:' + project.androidSupportTestVersion
    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:' + project.espressoVersion
    androidTestImplementation('com.android.support.test.espresso:espresso-contrib:' + project.espressoVersion) {
        exclude module: 'accessibility-test-framework'
    }
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.2.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'pl.pragmatists:JUnitParams:1.1.0'
    testImplementation 'org.mockito:mockito-core:2.7.22'
    testImplementation "org.robolectric:robolectric:" + project.robolectricVersion
    testImplementation "org.robolectric:shadows-multidex:" + project.robolectricVersion
    testImplementation 'org.assertj:assertj-core:3.8.0'
    androidTestImplementation 'org.assertj:assertj-core:2.8.0'
    androidTestImplementation "com.squareup.spoon:spoon-client:2.0.0-SNAPSHOT"
    androidTestImplementation 'com.jraska:falcon:2.0.1'
    androidTestImplementation 'com.jraska:falcon-spoon-compat:2.0.1'

}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd-HHmm')
    return formattedDate
}

spoon {
    //Ignore annotation must be removed from class TestMain
    //otherwise Runner will fail resolving the test
    className = "org.totschnig.myexpenses.test.screenshots.TestMain"
    methodName = "mkScreenShots"
    grantAll = true
}

task copyFileForFixture(type: com.novoda.gradle.command.Files) {
    script {
        push "tests/script/screenshot.jpg", "/sdcard/Android/data/org.totschnig.myexpenses.fortest/files/screenshot.jpg"
    }
}

apply plugin: 'com.google.gms.google-services'
